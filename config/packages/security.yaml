security:
    encoders:
        App\Entity\User:
            algorithm: auto


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)
            security: false
        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        register:
            pattern:  ^/register
            stateless: true
            anonymous: true
        get_voyages:
            pattern: ^/api/voyages
            anonymous: true
        api:
            pattern: ^/api/
            stateless: true
            #anonymous: true
            provider: app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: true
            json_login:
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

#          ACTIVITE
        - { path: '^/admin/activites', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/activite/new', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/activite/{id}/details', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/activite/{id}/edit', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/activite/{id}/delete', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

#          COMMENTAIRES
        - { path: '^/admin/commentaires', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/commentaire/new', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/commentaire/{id}/details', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/commentaire/{id}/edit', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/commentaire/{id}/delete', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

#          ETAPES
        - { path: '^/admin/etapes', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/etape/new', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/etape/{id}/etape_details', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/etape/{id}/edit', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/etape/{id}/delete', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

#          USERS
        - { path: '^/admin/users', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/user/{id}/details', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/user/new', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/user/{id}/edit', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/user/{id}/delete', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

#        VOYAGES
        - { path: '^/admin/voyages', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/voyage/{id}/details', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/voyage/new', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/voyage/{id}/edit', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: '^/admin/voyage/{id}/delete', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: /api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY}
        - { path: ^/api/voyages, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: GET}
